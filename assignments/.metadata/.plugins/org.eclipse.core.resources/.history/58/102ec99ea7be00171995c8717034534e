package com.revature.BankingSystem.BankingUI;

import java.util.ArrayList;
import java.util.Scanner;

import com.revature.BankingSystem.BankClasses.*;

public class AccountManager {

	private static Scanner userInput;
	private static RegularUser currUser;

	public static boolean AccounManagment(RegularUser currAcc) {
		userInput = new Scanner(System.in);
		currUser = currAcc;
		boolean accManageFlag = true;

		do {
			System.out.print("1 - Deposit into account" + "\n2 - Withdraw from account" + "\n3 - Create new account"
					+ "\n4 - Teriminate exsiting account" + "\n5 - Transfer Funds" + "\n6 - Accounts Overview"
					+ "\n0 - Exit account managemrent\n");
			int userMenu = userInput.nextInt();

			switch (userMenu) {
			case 0:
				accManageFlag = false;
				break;
			case 1:
				deposit();
				break;
			case 2:
				withdraw();
				break;
			case 3:
				create();
				break;
			case 4:
				destroy();
				break;
			case 5:
				transfer();
				break;
			default:
				break;
			}

		} while (accManageFlag);

		userInput.close();
		return true;
	}

	private static void deposit() {
		Account acc = chooseAccount();
		System.out.println("Amount to deposit: ");
		double amount = userInput.nextDouble();
		acc.setBalance(acc.getBalance() + amount);
		System.out.println("New Balance: " + acc.getBalance());
	}

	private static void withdraw() {
		Account acc = chooseAccount();
		System.out.println("Amount to withdraw: ");
		double amount = userInput.nextDouble();
		if (acc.getBalance() - amount >= 0.0) {
			acc.setBalance(acc.getBalance() - amount);
			System.out.println("New Balance: " + acc.getBalance());
		} else {
			System.out.println("Cannot have negative balance");
		}

	}

	private static void create() {
		System.out.println("Type of Account: ");
		String type = userInput.next();
		System.out.println("Initial balance: ");
		double b = userInput.nextDouble();
		currUser.addAccount(new Account(type, b, currUser));
		System.out.println(currUser.getAccounts().get(currUser.getAccounts().size() - 1) + " Succesfully created");
	}

	private static void destroy() {
		Account acc = chooseAccount();
		if (acc.getBalance() == 0) {
			currUser.getAccounts().remove(acc);
		} else {
			System.out.println("Can only terminate account with 0 balence");
		}
	}

	private static void transfer() {
		System.out.println("Origin of transfer: ");
		Account acc1 = chooseAccount();
		System.out.println("Destination of transfer: ");
		Account acc2 = chooseAccount();
		System.out.println("Amount to transfer: ");
		double amount = userInput.nextDouble();

		if (acc1.getBalance() - amount >= 0.0) {
			acc1.setBalance(acc1.getBalance() - amount);
			acc2.setBalance(acc2.getBalance() + amount);
			System.out.println(acc1 + "\n" + acc2);

		} else {
			System.out.println("Cannot have negative balance");
		}

	}

	private static Account chooseAccount() {
		ArrayList<Account> userAcc = currUser.getAccounts();

		System.out.println("Choose account to manage: ");
		for (int i = 0; i < userAcc.size(); i++) {
			System.out.println("" + i + " - " + userAcc.get(i));
		}

		int userMenu = userInput.nextInt();

		return userAcc.get(userMenu);
	}

}
