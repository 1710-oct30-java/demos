--2.1 SELECT
--Task – Select all records from the Employee table.
--SELECT * FROM employee;

--Task – Select all records from the Employee table where last name is King.
--SELECT * From employee WHERE lastname = 'King';

--Task – Select all records from the Employee table where first name is Andrew and REPORTSTO is NULL.
--SELECT * FROM employee WHERE firstname='Andrew' AND reportsto IS NULL;
--2.2 ORDER BY
--Task – Select all albums in Album table and sort result set in descending order by title.
--SELECT * FROM album ORDER BY title DESC;

--Task – Select first name from Customer and sort result set in ascending order by city
--SELECT firstname FROM customer ORDER BY city;

--2.3 INSERT INTO
--Task – Insert two new records into Genre table
--SELECT * FROM genre;
--INSERT INTO genre (genreid, name) VALUES(26, 'Nu Metal');
--INSERT INTO genre (genreid, name) VALUES(27, 'Dubstep');

--Task – Insert two new records into Employee table
--SELECT * FROM employee;
--INSERT INTO employee (employeeid, lastname, firstname)
--VALUES (9, 'Jenkins', 'Leeroy');
--
--INSERT INTO employee (employeeid, lastname, firstname)
--VALUES (10, 'Jenkins', 'Debbie');

--Task – Insert two new records into Customer table
--SELECT * FROM customer;
--INSERT INTO customer (customerid, firstname, lastname, email)
--VALUES (60, 'Leeroy', 'Jenkins', 'leeroy.jenkins@email.net');
--
--INSERT INTO customer (customerid, firstname, lastname, email)
--VALUES (61, 'Tom', 'Smith', 'tom.smith@email.gov');

--2.4 UPDATE
--Task – Update Aaron Mitchell in Customer table to Robert Walter
--SELECT * FROM customer;
--UPDATE customer
--SET firstname = 'Robert', lastname = 'Walter'
--WHERE firstname = 'Aaron' AND lastname = 'Mitchell';

--Task – Update name of artist in the Artist table “Creedence Clearwater Revival” to “CCR”
--SELECT * FROM artist;
--UPDATE artist
--SET name = 'CCR'
--WHERE name = 'Creedence Clearwater Revival';

--2.5 LIKE
--Task – Select all invoices with a billing address like “T%”
--SELECT * FROM invoice;
--SELECT billingaddress FROM invoice
--WHERE billingaddress LIKE 'T%';

--2.6 BETWEEN
--Task – Select all invoices that have a total between 15 and 50
--SELECT *
--FROM invoice
--WHERE total BETWEEN 15 AND 50;

--Task – Select all employees hired between 1st of June 2003 and 1st of March 2004
--SELECT * FROM employee
--WHERE hiredate BETWEEN #01/06/2003# AND #01/03/2004#;

--2.7 DELETE
--Task – Delete a record in Customer table where the name is Robert Walter (There may be constraints that rely on this, find out how to resolve them).
--ALTER TABLE album
--DROP CONSTRAINT FK_AlbumArtistId;
--
--ALTER TABLE customer
--DROP CONSTRAINT FK_CustomerSupportRepId;
--
--ALTER TABLE employee
--DROP CONSTRAINT FK_EmployeeReportsTo;
--
--ALTER TABLE invoice
--DROP CONSTRAINT FK_InvoiceCustomerId;
--
--ALTER TABLE invoiceline
--DROP CONSTRAINT FK_InvoiceLineInvoiceId;
--
--ALTER TABLE invoiceline
--DROP CONSTRAINT FK_InvoiceLineTrackId;
--
--ALTER TABLE playlisttrack
--DROP CONSTRAINT FK_PlaylistTrackPlaylistId;
--
--ALTER TABLE playlisttrack
--DROP CONSTRAINT FK_PlaylistTrackTrackId;
--
--ALTER TABLE track
--DROP CONSTRAINT FK_TrackAlbumId;
--
--ALTER TABLE track
--DROP CONSTRAINT FK_TrackGenreId;
--
--ALTER TABLE track
--DROP CONSTRAINT FK_TrackMediaTypeId;
--
--
--DELETE FROM customer
--WHERE firstname = 'Emma' AND lastname = 'Jones';
--SELECT * FROM customer;

--
--3.0	SQL Functions
--In this section you will be using the Oracle system functions, as well as your own functions, to perform various actions against the database
--3.1 System Defined Functions
--Task – Create a function that returns the current time.
--CREATE OR REPLACE FUNCTION get_currentTime
--RETURN VARCHAR2 IS
--
--currentTime VARCHAR2(30);
--
--BEGIN
--    currentTime := TO_CHAR(SYSTIMESTAMP,'HH24:MI:SS');
--    RETURN currentTime;
--END;

--SELECT GET_CURRENTTIME() from dual;


--Task – create a function that returns the length of a mediatype from the mediatype table

--CREATE OR REPLACE FUNCTION getMediaTypeLen(mediatype_id IN NUMBER)
--RETURN NUMBER AS
--
--myMediaType VARCHAR2(30);
--
--BEGIN
--    SELECT mediatype.name INTO myMediaType FROM mediatype
--    WHERE MEDIATYPEID = mediatype_id;
--    RETURN LENGTH(myMediaType);
--END;

--SELECT getMediaTypeLen(3) FROM dual;


--3.2 System Defined Aggregate Functions
--Task – Create a function that returns the average total of all invoices
--CREATE OR REPLACE FUNCTION avgTotalInvoices
--RETURN NUMBER IS
--
--average NUMBER;
--
--BEGIN
--    SELECT AVG(total) INTO average FROM invoice;
--    RETURN average;
--END;

SELECT AVGTOTALINVOICES FROM invoice;


--Task – Create a function that returns the most expensive track
--3.3 User Defined Scalar Functions
--CREATE OR REPLACE FUNCTION mostExpensive
--RETURN NUMBER AS
--
--maxTrack NUMBER;
--
--BEGIN
--    SELECT MAX(unitprice) IN maxTrack FROM track;
--    RETURN maxTrack;
--END;

--SELECT MOSTEXPENSIVE FROM dual;

--Task – Create a function that returns the average price of invoiceline items in the invoiceline table
--CREATE OR REPLACE FUNCTION avgPrice
--RETURN NUMBER AS
--
--average NUMBER;
--
--BEGIN
--    SELECT AVG(INVOICELINE.UNITPRICE) INTO average FROM invoiceline;
--    RETURN average;
--END;
--SELECT avgPrice FROM dual;

--3.4 User Defined Table Valued Functions
--Task – Create a function that returns all employees who are born after 1968.
CREATE OR REPLACE FUNCTION after1968
--RETURN NUMBER AS
--
--employee_id NUMBER;
--
--BEGIN
--    SELECT * INTO employee_id FROM employee WHERE employee.BIRTHDATE > TO_DATE('1967-12-31', 'YYYY-MM-DD');
--    RETURN employee_id;
--END;


--4.0 Stored Procedures
-- In this section you will be creating and executing stored procedures. You will be creating various types of stored procedures that take input and output parameters.
--4.1 Basic Stored Procedure
--Task – Create a stored procedure that selects the first and last names of all the employees.
--CREATE OR REPLACE PROCEDURE spfirstAndLast
--AS
--BEGIN
--    SELECT firstname, lastname FROM employee;
--END;

--4.2 Stored Procedure Input Parameters
--Task – Create a stored procedure that updates the personal information of an employee.
--Task – Create a stored procedure that returns the managers of an employee.
--4.3 Stored Procedure Output Parameters
--Task – Create a stored procedure that returns the name and company of a customer.
--5.0 Transactions
--In this section you will be working with transactions. Transactions are usually nested within a stored procedure. You will also be working with handling errors in your SQL.
--Task – Create a transaction that given a invoiceId will delete that invoice (There may be constraints that rely on this, find out how to resolve them).
--Task – Create a transaction nested within a stored procedure that inserts a new record in the Customer table
--6.0 Triggers
--In this section you will create various kinds of triggers that work when certain DML statements are executed on a table.
--6.1 AFTER/FOR
--Task - Create an after insert trigger on the employee table fired after a new record is inserted into the table.
--Task – Create an after update trigger on the album table that fires after a row is inserted in the table
--Task – Create an after delete trigger on the customer table that fires after a row is deleted from the table.
--
--6.2 INSTEAD OF
--Task – Create an instead of trigger that restricts the deletion of any invoice that is priced over 50 dollars.
--7.0 JOINS
--In this section you will be working with combing various tables through the use of joins. You will work with outer, inner, right, left, cross, and self joins.
--7.1 INNER
--Task – Create an inner join that joins customers and orders and specifies the name of the customer and the invoiceId.
--SELECT customer.firstname, customer.lastname, invoiceline.invoicelineid FROM customer 
--JOIN invoiceline
--ON customer.customerid = invoiceline.invoicelineid;

--7.2 OUTER
--Task – Create an outer join that joins the customer and invoice table, specifying the CustomerId, firstname, lastname, invoiceId, and total.
--SELECT customer.customerid, customer.firstname, customer.lastname, invoice.invoiceid, invoice.total 
--FROM customer
--JOIN invoice
--ON customer.customerid = invoice.invoiceid;

--7.3 RIGHT
--Task – Create a right join that joins album and artist specifying artist name and title.
--SELECT artist.name, album.title FROM artist
--JOIN album
--ON artist.artistid= album.albumid;

--7.4 CROSS
--Task – Create a cross join that joins album and artist and sorts by artist name in ascending order.
SELECT * FROM album, artist ORDER BY artist.name ASC;

--7.5 SELF
--Task – Perform a self-join on the employee table, joining on the reportsto column.
--SELECT x.employee_first, x.employee_last, y.employee_reportsto
--FROM employee x, employee y
--WHERE x.reportsto = y.reportsto
--AND x.EMPLOYEEID > x.EMPLOYEEID;

--8.0 Indexes
--In this section you will be creating Indexes on various tables. Indexes can speed up performance of reading data.
--8.1 Clustered Indexes
--Task – Create a clustered index on of table of your choice
--CREATE UNIQUE INDEX emp_birthdate
--ON employee (birthdate);
